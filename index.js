const express = require('express');
const axios = require('axios');
const app = express();

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π –ª–æ–≥–≥–µ—Ä
const logger = {
  log: (...args) => {
    const timestamp = new Date().toISOString();
    console.log(`[${timestamp}]`, ...args);
  }
};

// Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ö–æ–¥—è—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
app.use((req, res, next) => {
  let data = '';
  req.on('data', chunk => {
    data += chunk;
    logger.log('–ü–æ–ª—É—á–µ–Ω chunk –¥–∞–Ω–Ω—ã—Ö:', chunk.toString('utf8').slice(0, 100));
  });
  
  req.on('end', () => {
    try {
      req.rawBody = data;
      logger.log('–ü–æ–ª–Ω–æ–µ —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞:', data.slice(0, 200));
      
      // –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON, –µ—Å–ª–∏ –Ω–µ—Ç - –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ —Ç–µ–∫—Å—Ç
      req.body = data.trim().startsWith('{') ? JSON.parse(data) : data;
      logger.log('–ü–∞—Ä—Å–∏–Ω–≥ —Ç–µ–ª–∞:', typeof req.body);
    } catch (e) {
      req.body = data;
      logger.log('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞:', e.message);
    }
    next();
  });
});

const BOT_TOKEN = '7581556039:AAHLKcFBAa4sEf_7IzMbJkmgwCzTSR4bYmI';
const CHAT_ID = '7098678847';

// –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
const messageHistory = [];
const MAX_HISTORY = 10;

app.post('/webhook', async (req, res) => {
  const requestId = Math.random().toString(36).slice(2, 8);
  logger.log(`\n=== –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ ${requestId} ===`);
  
  try {
    logger.log('Raw headers:', JSON.stringify(req.headers, null, 2));
    logger.log('Raw body type:', typeof req.body);
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ –ª—é–±–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
    const rawText = typeof req.body === 'object' 
      ? JSON.stringify(req.body, null, 2) 
      : String(req.body);
    
    logger.log('–ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç:', rawText.slice(0, 200));

    // 1. –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏ (1:28)
    let cleanText = rawText.replace(/\d{1,2}:\d{2}/g, '');
    logger.log('–ü–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏:', cleanText.slice(0, 200));

    // 2. –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
    cleanText = cleanText.split('\n')[0].trim();
    logger.log('–ü–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä–µ–Ω–æ—Å–æ–≤:', cleanText);

    // 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç–æ—Ç—É
    if (!cleanText || cleanText.length < 3) {
      logger.log('–ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º');
      return res.status(200).send('OK (empty)');
    }

    // 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–µ–π
    const isDuplicate = messageHistory.some(msg => msg.text === cleanText);
    logger.log('–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–µ–π:', isDuplicate ? '–ù–ê–ô–î–ï–ù –î–£–ë–õ–¨' : '–ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç');
    
    if (isDuplicate) {
      logger.log('–¢–µ–∫—Å—Ç —É–∂–µ –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ä–∞–Ω–µ–µ');
      return res.status(200).send('OK (duplicate)');
    }

    // 5. –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
    messageHistory.unshift({
      text: cleanText,
      time: new Date().toISOString()
    });
    
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏
    if (messageHistory.length > MAX_HISTORY) {
      messageHistory.pop();
    }
    
    logger.log('–¢–µ–∫—É—â–∞—è –∏—Å—Ç–æ—Ä–∏—è:', JSON.stringify(messageHistory, null, 2));

    // 6. –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram
    logger.log('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram:', cleanText.slice(0, 100));
    await axios.post(`https://api.telegram.org/bot${BOT_TOKEN}/sendMessage`, {
      chat_id: CHAT_ID,
      text: `üì¢ ${cleanText.slice(0, 300)}`,
      parse_mode: 'Markdown'
    });
    
    logger.log('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
    res.status(200).send('OK');
  } catch (error) {
    logger.log('–û–®–ò–ë–ö–ê:', error.message);
    logger.log('Stack:', error.stack);
    res.status(200).send('OK');
  } finally {
    logger.log(`=== –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ ${requestId} ===\n`);
  }
});

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  logger.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
  logger.log('–ü—Ä–∏–º–µ—Ä –ª–æ–≥–∞:');
  logger.log({
    level: 'info',
    message: '–°–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞',
    timestamp: new Date().toISOString()
  });
});
