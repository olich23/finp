const express = require('express');
const axios = require('axios');
const app = express();
const crypto = require('crypto');

// –û—Ç–∫–ª—é—á–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø–∞—Ä—Å–µ—Ä—ã - –±—É–¥–µ–º –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –≤—Ä—É—á–Ω—É—é
app.use((req, res, next) => {
  let data = '';
  req.setEncoding('utf8');
  req.on('data', chunk => data += chunk);
  req.on('end', () => {
    try {
      req.rawBody = data;
      // –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –∫–∞–∫ JSON, –µ—Å–ª–∏ –Ω–µ—Ç - –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
      req.body = data.trim().startsWith('{') ? JSON.parse(data) : data;
    } catch (e) {
      req.body = data;
    }
    next();
  });
});

const BOT_TOKEN = '7581556039:AAHLKcFBAa4sEf_7IzMbJkmgwCzTSR4bYmI';
const CHAT_ID = '7098678847';

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Ç–∞–π–º—Å—Ç–µ–º–ø–∞–º–∏
const messageStore = new Map();
const STORE_SIZE = 50; // –•—Ä–∞–Ω–∏–º 50 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π

app.post('/webhook', async (req, res) => {
  try {
    // –ü–æ–ª—É—á–∞–µ–º —á–∏—Å—Ç—ã–π —Ç–µ–∫—Å—Ç (—É–¥–∞–ª—è–µ–º HTML-—Ç–µ–≥–∏ –µ—Å–ª–∏ –µ—Å—Ç—å)
    const rawText = typeof req.body === 'object' 
      ? JSON.stringify(req.body) 
      : req.body;
    
    const cleanText = rawText.replace(/<[^>]+>/g, '')
      .replace(/\s+/g, ' ')
      .trim();

    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    if (!cleanText || cleanText.length < 2) {
      return res.status(200).send('OK (empty)');
    }

    // –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
    const messageKey = crypto.createHash('md5')
      .update(cleanText)
      .digest('hex');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã (—Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –±—ã–ª–æ –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –º–∏–Ω—É—Ç)
    const now = Date.now();
    if (messageStore.has(messageKey)) {
      const lastSeen = messageStore.get(messageKey);
      if (now - lastSeen < 300000) { // 5 –º–∏–Ω—É—Ç
        return res.status(200).send('OK (duplicate)');
      }
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    messageStore.set(messageKey, now);
    
    // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏
    if (messageStore.size > STORE_SIZE) {
      const oldest = [...messageStore.entries()]
        .sort((a, b) => a[1] - b[1])
        .slice(0, 5);
      oldest.forEach(([key]) => messageStore.delete(key));
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –¥—É–±–ª–∏–∫–∞—Ç)
    await axios.post(`https://api.telegram.org/bot${BOT_TOKEN}/sendMessage`, {
      chat_id: CHAT_ID,
      text: `üí≥ ${cleanText.slice(0, 300)}`,
      parse_mode: 'Markdown'
    });

    res.status(200).send('OK');
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞:', error.message);
    res.status(200).send('OK');
  }
});

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`));
