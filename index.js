const express = require('express');
const axios = require('axios');
const app = express();

// –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—Ç–∫–ª—é—á–∞–µ–º –≤—Å–µ –ø–∞—Ä—Å–µ—Ä—ã
app.use((req, res, next) => {
  let data = '';
  req.on('data', chunk => data += chunk);
  req.on('end', () => {
    req.rawBody = data;
    next();
  });
});

const BOT_TOKEN = '7581556039:AAHLKcFBAa4sEf_7IzMbJkmgwCzTSR4bYmI';
const CHAT_ID = '7098678847';

// –ü—Ä–æ—Å—Ç–µ–π—à–∏–π –∫—ç—à –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
const lastMessage = { text: '', time: 0 };

app.post('/webhook', async (req, res) => {
  try {
    // –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 300 —Å–∏–º–≤–æ–ª–æ–≤
    const rawText = req.rawBody.toString().slice(0, 300);
    
    // 1. –£–¥–∞–ª—è–µ–º –≤—Å—ë –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞ —Å—Ç—Ä–æ–∫–∏
    let cleanText = rawText.split('\n')[0];
    
    // 2. –ï—Å–ª–∏ –µ—Å—Ç—å –º–∞—Ä–∫–µ—Ä—ã —Å–ø–∏—Å–∫–∞ (-, ‚Ä¢, *) - –±–µ—Ä–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –º–∞—Ä–∫–µ—Ä–∞
    const bulletPoints = ['- ', '‚Ä¢ ', '* '];
    bulletPoints.forEach(marker => {
      if (cleanText.includes(marker)) {
        cleanText = cleanText.split(marker).pop();
      }
    });
    
    // 3. –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏ (1:25)
    cleanText = cleanText.replace(/\d{1,2}:\d{2}/g, '').trim();
    
    // 4. –ó–∞—â–∏—Ç–∞ –æ—Ç –¥—É–±–ª–µ–π (–µ—Å–ª–∏ —Ç–µ–∫—Å—Ç –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è –∏ –ø—Ä–æ—à–ª–æ < 5 —Å–µ–∫)
    const now = Date.now();
    if (cleanText === lastMessage.text && now - lastMessage.time < 5000) {
      return res.status(200).send('OK (duplicate)');
    }
    
    // 5. –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
    lastMessage.text = cleanText;
    lastMessage.time = now;
    
    // 6. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç –Ω–µ –ø—É—Å—Ç–æ–π
    if (cleanText.length > 3) {
      await axios.post(`https://api.telegram.org/bot${BOT_TOKEN}/sendMessage`, {
        chat_id: CHAT_ID,
        text: `üì¢ ${cleanText}`,
        parse_mode: 'Markdown'
      });
    }
    
    res.status(200).send('OK');
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞:', error.message);
    res.status(200).send('OK');
  }
});

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`));
