const express = require('express');
const axios = require('axios');
const app = express();

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const BOT_TOKEN = '7581556039:AAHLKcFBAa4sEf_7IzMbJkmgwCzTSR4bYmI';
const CHAT_ID = '7098678847';
const IGNORE_PREFIX = 'üì¢'; // –ü—Ä–µ—Ñ–∏–∫—Å, –∫–æ—Ç–æ—Ä—ã–π –¥–æ–±–∞–≤–ª—è–µ—Ç –±–æ—Ç

// –õ–æ–≥–≥–µ—Ä
const log = (...args) => {
  const timestamp = new Date().toISOString();
  console.log(`[${timestamp}]`, ...args);
};

// Middleware –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Ö–æ–¥—è—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
app.use(express.text({ type: '*/*' }));

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
const messageStore = new Set();
const MAX_STORE_SIZE = 100;

app.post('/webhook', async (req, res) => {
  const rawText = req.body;
  log('–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:', rawText.slice(0, 100));

  try {
    // 1. –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç —Å–∞–º–æ–≥–æ –±–æ—Ç–∞
    if (rawText.startsWith(IGNORE_PREFIX)) {
      log('–ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –±–æ—Ç–∞');
      return res.status(200).send('OK (ignored)');
    }

    // 2. –û—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞
    const cleanText = rawText
      .replace(/\d{1,2}:\d{2}/g, '') // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º—è
      .replace(/[-\‚Ä¢\*\[\]]/g, '')   // –£–¥–∞–ª—è–µ–º —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã
      .replace(/\s+/g, ' ')          // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø—Ä–æ–±–µ–ª—ã
      .trim();

    // 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç–æ—Ç—É
    if (cleanText.length < 3) {
      log('–ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏');
      return res.status(200).send('OK (empty)');
    }

    // 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–µ–π
    const textHash = require('crypto')
      .createHash('md5')
      .update(cleanText)
      .digest('hex');

    if (messageStore.has(textHash)) {
      log('–û–±–Ω–∞—Ä—É–∂–µ–Ω –¥—É–±–ª—å:', cleanText.slice(0, 50));
      return res.status(200).send('OK (duplicate)');
    }

    // 5. –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    messageStore.add(textHash);
    if (messageStore.size > MAX_STORE_SIZE) {
      const first = messageStore.values().next().value;
      messageStore.delete(first);
    }

    // 6. –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram
    log('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram:', cleanText.slice(0, 50));
    await axios.post(`https://api.telegram.org/bot${BOT_TOKEN}/sendMessage`, {
      chat_id: CHAT_ID,
      text: cleanText.slice(0, 300), // –ë–µ–∑ –ø—Ä–µ—Ñ–∏–∫—Å–∞!
      parse_mode: 'Markdown',
      disable_notification: false
    });

    res.status(200).send('OK');
  } catch (error) {
    log('–û—à–∏–±–∫–∞:', error.message);
    res.status(200).send('OK');
  }
});

const PORT = process.env.PORT || 8080;
app.listen(PORT, () => log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`));
