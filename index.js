const express = require('express');
const axios = require('axios');
const crypto = require('crypto');
const app = express();

// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –≤—Ö–æ–¥—è—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
app.use((req, res, next) => {
  let data = '';
  req.on('data', chunk => data += chunk);
  req.on('end', () => {
    try {
      req.rawBody = data;
      // –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON, –µ—Å–ª–∏ –Ω–µ—Ç - –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ —Ç–µ–∫—Å—Ç
      req.body = data.trim().startsWith('{') ? JSON.parse(data) : data;
    } catch (e) {
      req.body = data;
    }
    next();
  });
});

const BOT_TOKEN = '7581556039:AAHLKcFBAa4sEf_7IzMbJkmgwCzTSR4bYmI';
const CHAT_ID = '7098678847';

// –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
const messageStore = new Map();
const MAX_STORE_SIZE = 100;

// –§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
const cleanNotification = (text) => {
  return text
    .replace(/<[^>]+>/g, '') // –£–¥–∞–ª—è–µ–º HTML-—Ç–µ–≥–∏
    .replace(/[-\‚Ä¢\*\[\]]/g, '') // –£–¥–∞–ª—è–µ–º —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã
    .replace(/\s+/g, ' ') // –ó–∞–º–µ–Ω—è–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã
    .replace(/(\d{1,2}:\d{2})\s+/g, '') // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º—è —Ç–∏–ø–∞ "1:21"
    .trim();
};

app.post('/webhook', async (req, res) => {
  try {
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ –ª—é–±–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
    const rawText = typeof req.body === 'object' 
      ? JSON.stringify(req.body) 
      : String(req.body);
    
    // –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç
    const cleanText = cleanNotification(rawText);
    
    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    if (!cleanText || cleanText.length < 3) {
      return res.status(200).send('OK (empty)');
    }

    // –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á
    const messageKey = crypto.createHash('md5')
      .update(cleanText)
      .digest('hex');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
    if (messageStore.has(messageKey)) {
      return res.status(200).send('OK (duplicate)');
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    messageStore.set(messageKey, Date.now());
    
    // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏
    if (messageStore.size > MAX_STORE_SIZE) {
      const oldest = [...messageStore.entries()]
        .sort((a, b) => a[1] - b[1])
        .slice(0, 10);
      oldest.forEach(([key]) => messageStore.delete(key));
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram
    await axios.post(`https://api.telegram.org/bot${BOT_TOKEN}/sendMessage`, {
      chat_id: CHAT_ID,
      text: `üìå ${cleanText.slice(0, 250)}`, // –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
      parse_mode: 'Markdown'
    });

    res.status(200).send('OK');
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞:', error.message);
    res.status(200).send('OK');
  }
});

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`));
